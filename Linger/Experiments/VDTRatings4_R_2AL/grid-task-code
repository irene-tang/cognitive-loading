# Version 1.1

set TestLang 1
set Experiment dualTaskGrid
set MaxChars 120
set RightAnswer "Right!"
set WrongAnswer "Wrong"
set FeedbackDelay 1000

set GridSize 10
set BigGridSize 50
set GridXOffset 10
set GridYOffset 10
set GridOutline black
set GridFill    blue

# Params are COLS ROWS MIN_ON MAX_ON
set GridParams(CAS-A) {4 3 1 1}
set GridParams(CAO-A) {4 3 1 1}
set GridParams(CAS-B) {4 3 2 2}
set GridParams(CAO-B) {4 3 2 2}
set GridParams(-)     {4 3 1 2}

set NumCorrect 0
set NumTotal 0

proc changeScore correct {
  global NumCorrect NumTotal
  set NumCorrect [expr $NumCorrect + $correct]
  incr NumTotal
}

proc randRange {min max} {
  return [expr [randInt [expr $max - $min + 1]] + $min]
}

# proc chooseCells {n min max alreadyChosen} {
#   foreach c $alreadyChosen {set chosen($c) 1}
#   set newlyChosen {}
#   set cells [randRange $min $max]
#   set numChosen [llength $alreadyChosen]
#   if {$numChosen + $cells > $n} {
#     warning "Not enough cells"
#     set cells [expr $n - $numChosen]
#   }
#   for {set i 0} {$i < $cells} {} {
#     set c [randInt $n]
#     if {![info exists chosen($c)]} {
#       set chosen($c) 1
#       lappend newlyChosen $c
#       incr i
#     }
#   }
#   return $newlyChosen
# }

proc cellCoords {c cols} {
  set y [expr $c / $cols]
  set x [expr $c - $y * $cols]
  return "$x $y"
}

proc cellCode {x y cols} {
  return [expr $cols * $y + $x]
}

proc markNeighbors {cols rows cells on} {
  upvar neighbors neighbors
  foreach c $cells {
    set coords [cellCoords $c $cols]
    set x [lindex $coords 0]
    set y [lindex $coords 1]
    set pairs {}
    lappend pairs "[expr $x - 1] $y"
    lappend pairs "[expr $x + 1] $y"
    lappend pairs "$x [expr $y - 1]"
    lappend pairs "$x [expr $y + 1]"
    foreach pair $pairs {
      set i [lindex $pair 0]
      set j [lindex $pair 1]
      if {$i >= 0 && $i < $cols && $j >= 0 && $j < $rows} {
        if {$on} {
          set neighbors([cellCode $i $j $cols]) 1
        } else {
          catch {unset neighbors([cellCode $i $j $cols])}
        }
      }
    }
  }
}

# This only chooses cells that haven't been chosen before and are neighbors of
# ones that have been chosen.  The first cell is chosen randomly.
proc chooseCell {cols rows alreadyChosen justChosen} {
  array set neighbors {}
  markNeighbors $cols $rows $alreadyChosen 1
  markNeighbors $cols $rows $justChosen 0
  foreach c $alreadyChosen {catch {unset neighbors($c)}}
  set candidates [array names neighbors]
  puts "chosen     = $alreadyChosen"
  puts "justChosen = $justChosen"
  puts "candidates = $candidates"
  if {[llength $candidates] == 0} {return -1}
  return [chooseRand $candidates]
}

proc chooseCells {cols rows min max alreadyChosen} {
  set n [randRange $min $max]
  set new {}
  for {set i 0} {$i < $n} {incr i} {
    # Try without generating neighbors
    set c [chooseCell $cols $rows $alreadyChosen $new]
    if {$c == -1} {
      puts "failed to generate non-adjacent"
      # Try with generating neighbors
      set c [chooseCell $cols $rows $alreadyChosen {}]
    }
    if {$c == -1} {
      puts "failed to generate valid cell, going random"
      # Just go randomly
      set c [randInt [expr $rows * $cols]]
    }
    
    puts "chose $c"
    lappend new $c
    lappend alreadyChosen $c
  }
  return $new
}

proc drawGrid {w cols rows cellsOn} {
  global GridXOffset GridYOffset GridSize GridOutline GridFill X Y BgColor
  set c 0
  for {set i 0} {$i < $rows} {incr i} {
    for {set j 0} {$j < $cols} {incr j} {
      set x [expr $X($w) + $GridXOffset + $j * $GridSize]
      set y [expr $Y($w) - $GridYOffset - $i * $GridSize]
      .c create rectangle $x $y [expr $x + $GridSize + 1] \
          [expr $y - $GridSize - 1] -outline $GridOutline -fill white \
          -tags "w$w-g$c w$w-g"
      incr c
    }
  }
  foreach c $cellsOn {
    .c itemconfigure w$w-g$c -fill $GridFill
  }
  set x [expr $X($w) + $GridXOffset]
  set y [expr $Y($w) - $GridYOffset]
  .c create rectangle $x $y [expr $x + $GridSize * $cols + 1] \
      [expr $y - $GridSize * ($rows + 1) - 1] -outline $BgColor \
     -fill $BgColor -tag w$w-m
}

proc dualTaskGridPresentSentence item {
  global Tag NumWords GoKey SkipKey StopTime ResultFile Subject Abort Word \
      ClockRes TextColor MaskColor BgColor TestLang GridParams CellsOn

  set AngleSum 0
  set condition [lindex [split $item :] 2]
  set cellsOn {}
  for {set w 0} {$w < $NumWords} {incr w} {
    if {$TestLang} {drawWord $w}
    maskWord $w
    set params $GridParams($condition)
    set cols [lindex $params 0]
    set rows [lindex $params 1]
    set minOn [lindex $params 2]
    set maxOn [lindex $params 3]
    set cells($w) [chooseCells $cols $rows $minOn $maxOn $cellsOn]
    puts $cells($w)
    
    drawGrid $w $cols $rows $cells($w)
    eval lappend cellsOn $cells($w)
  }
  set CellsOn [lsort -integer -unique $cellsOn]
  puts "cellsOn: $CellsOn"

  update
  set Abort 0
  bind . <KeyPress-$SkipKey> {set Abort 1; set Waiting 0}
  preventRepeat $SkipKey
  bind . <KeyPress-$GoKey> {set Waiting 0}
  preventRepeat $GoKey
  set Waiting 1
  vwait Waiting

  bind . <KeyPress-$GoKey> {
    set StopTime $KeyTime
    if {[timeElapsed $StartTime $StopTime] > ($MinRelease * $ClockRes)} {
      set Waiting 0
    }
  }
  preventRepeat $GoKey
  for {set w 0} {$w < $NumWords && !$Abort} {incr w} {
    hide m$w; hide a$w; show w$w $TextColor
#    .c lower w$w-m
    .c raise w$w-g
    update
    set StartTime [clock clicks]
    set StopTime $StartTime
    set Waiting 1
    vwait Waiting

    set delay [expr [timeElapsed $StartTime $StopTime] / $ClockRes]
    if {$ResultFile != {} && $item != {}} {
      puts $ResultFile "$Subject [split $item :] $w [joinWords $Word($w)] $Tag($w) $delay"
      flush $ResultFile
    }

#    .c raise w$w-m
    .c lower w$w-g
    hide w$w; show m$w $MaskColor
    if {$w > 0} {show a[expr $w - 1] $MaskColor}
  }
  bind . <KeyPress-$SkipKey> {}
  bind . <KeyPress-$GoKey> {}
  clearWindow
}

proc toggleCell c {
  global Active GridFill Activated
  if {$Active($c)} {
    set Active($c) 0
    .c itemconfig g$c -fill white
    incr Activated -1
  } else {
    set Active($c) 1
    .c itemconfig g$c -fill $GridFill
    incr Activated
  }
}

proc askForGridCells item {
  global UpShift Answer ResultFile Subject StartTime StopTime \
    ClockRes FeedbackDelay GoKey SkipKey BigGridSize Active Activated \
    TextColor tcl_platform BgColor CellsOn GridParams GridOutline

  set condition [lindex [split $item :] 2]
  set params $GridParams($condition)
  set cols [lindex $params 0]
  set rows [lindex $params 1]
  set MidX [expr [winfo width .c] / 2]
  set MinX [expr ([winfo width .c] - $cols * $BigGridSize) / 2]
  set MinY [expr ([winfo height .c] - $rows * $BigGridSize) / 2]
  set c 0
  for {set i 0} {$i < $rows} {incr i} {
    for {set j 0} {$j < $cols} {incr j} {
      set x [expr $MinX + $j * $BigGridSize]
      set y [expr $MinY - $i * $BigGridSize]
      .c create rectangle $x $y [expr $x + $BigGridSize + 1] \
        [expr $y - $BigGridSize - 1] -fill white -outline $GridOutline -tag g$c
      set Active($c) 0
      .c bind g$c <Button> "toggleCell $c"
      incr c
    }
  }
  set Activated 0
  set totalCells $c
  .c create text $MidX [expr [winfo height .c] - 100] \
     -font ContinueFont -fill $TextColor -anchor s \
     -text "Select the cells that were activated at some point during the sentence.\nPress the spacebar when you're done."
  if {$tcl_platform(platform) == "windows"} {
    . configure -cursor center_ptr
  } else {
    . configure -cursor "center_ptr black"
  }

  set Waiting 1
  bind . <KeyPress-$GoKey> {
    set StopTime $KeyTime
    if {[timeElapsed $StartTime $StopTime] > ($MinRelease * $ClockRes)} {
      set Waiting 0
    }
  }
  preventRepeat $GoKey
  bind . <KeyPress-$SkipKey> {set Abort 1; set Waiting 0}
  preventRepeat $SkipKey

  set StartTime [clock clicks]
  vwait Waiting
  set delay [expr [timeElapsed $StartTime $StopTime] / $ClockRes]
  bind . <KeyPress-$GoKey> {}
  bind . <KeyPress-$SkipKey> {}

  if {$tcl_platform(platform) == "windows"} {
    . configure -cursor crosshair
  } else {
    . configure -cursor "crosshair $BgColor"
  }
  clearWindow
  update

  set totalOn [llength $CellsOn]
  set misses 0
  set falseAlarms $Activated
  foreach c $CellsOn {
    if {!$Active($c)} {
      incr misses
    } else {
      incr falseAlarms -1
    }
  }
  if {$misses > $falseAlarms} {
    set errors $misses
  } else {
    set errors $falseAlarms
  }
  puts "misses: $misses"
  puts "falseAlarms: $falseAlarms"
  puts "errors: $errors"

  if {$errors == 0} {
    timedMessage "Right!" $FeedbackDelay BigFont center
    changeScore 1
  } elseif {$errors == 1} {
    timedMessage "Almost" $FeedbackDelay BigFont center
    changeScore 0.5
  } else {
    timedMessage "Not Quite" $FeedbackDelay BigFont center
    changeScore 0
  }

  destroy .entry
  if {$ResultFile != {} && $item != {}} {
    puts $ResultFile "$Subject [split $item :] !GRID $errors $totalOn $delay"
    flush $ResultFile
  }
}

proc presentQuestion {question item font justify} {
  global TextColor RightShift UpShift Answer YesKey NoKey StopTime \
      ResultFile Subject PadY QuestionKeys SkipKey MultiChoiceMark ClockRes
  if {[string index $question 0] == $MultiChoiceMark} {
    return [presentMultiChoice $question $item $font $justify]
  }
  set len [llength $question]
  set tag [string range [lindex $question 0] 1 end]
  set correct [lindex $question end]
  set question [lrange $question 1 [expr $len - 2]]
  if {$justify == "center"} {
    .c create text [expr [winfo width .c] / 2] \
        [expr [winfo height .c] / 2 - $UpShift] \
        -text $question -anchor n -fill $TextColor -font $font
  } else {
    .c create text $RightShift [expr [winfo height .c] / 2 - $UpShift] \
        -text $question -anchor nw -fill $TextColor -font $font
  }
  .c create text [expr [winfo width .c] / 2] \
      [expr [winfo height .c] - $PadY - 40] \
      -text $QuestionKeys -font BigFont -fill $TextColor -anchor s
  bind . <Key-$YesKey> {set StopTime $KeyTime; set Answer $Yes}
  preventRepeat $YesKey
  bind . <Key-$NoKey>  {set StopTime $KeyTime; set Answer $No}
  preventRepeat $NoKey
  update
  set StartTime [clock clicks]
  bind . <Key-$SkipKey> "set StopTime $StartTime; set Answer $correct"
  set Answer {}
  vwait Answer

  bind . <Key-$YesKey>   {}
  bind . <Key-$NoKey>    {}
  bind . <Key-$SkipKey>  {}
  set delay [expr [timeElapsed $StartTime $StopTime] / $ClockRes]
  clearWindow
  if {$Answer == $correct} {set code 1} else {set code 0}
  giveFeedback $code
  if {$code == 1} {changeScore 1} else {changeScore 0}
  if {$ResultFile != {} && $item != {}} {
    puts $ResultFile "$Subject [split $item :] ?$tag $Answer $code $delay"
    flush $ResultFile
  }
}

proc dualTaskGridItem item {
  global Sentence PreDelay NumCorrect NumTotal FeedbackDelay TestLang
  startDelay D1 $PreDelay
  parseSentence $Sentence($item)
  waitOnDelay D1
  dualTaskGridPresentSentence $item
  askForGridCells $item
  if {$TestLang} {askQuestions $item TextFont center}
  timedMessage [format "%d%%" [expr int(($NumCorrect * 100) / $NumTotal)]] \
    $FeedbackDelay BigFont center
}


proc dualTaskGrid list {
  standardExperiment dualTaskGridItem $list
}
